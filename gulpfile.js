/* eslint-env node */
'use strict';

// Imports
const del = require('del');
const browsersync = require('browser-sync');
const path = require('path');

const gulp = require('gulp');
const cleanCSS = require('gulp-clean-css');
const htmlReplace = require('gulp-html-replace');
const htmlmin = require('gulp-htmlmin');
const rename = require('gulp-rename');
const rev = require('gulp-rev');
const revReplace = require('gulp-rev-replace');
const sass = require('gulp-sass');

// Paths
const BUILD_DIR = 'build';

function clean() {
    return del([
        'index.html',
        BUILD_DIR,
    ]);
}

// Compile scss files
function css() {
    // noinspection JSUnresolvedFunction
    return gulp
        .src('src/css/*.scss')
        .pipe(sass().on('error', sass.logError))
        .pipe(gulp.dest(BUILD_DIR))
        .pipe(browsersync.stream());
}

function optimizeCSS() {
    return gulp
        // Process all css from build dir
        .src(path.join(BUILD_DIR, '**/*.css'))
        // Minify using clean-css
        .pipe(cleanCSS())
        // Write file with revision hash
        .pipe(rev())
        // Add .min suffix
        .pipe(rename({
            suffix: '.min'
        }))
        .pipe(gulp.dest(BUILD_DIR))
        // Output revision manifest
        .pipe(rev.manifest())
        .pipe(gulp.dest(BUILD_DIR));
}

// Generate index.html for development build
function templateDev() {
    return gulp
        .src('./template.html')
        // Remove production block
        .pipe(htmlReplace({
            prod: '',
        }, {
            keepUnassigned: true, // Keep other unmentioned blocks
        }))
        // Output to project root dir
        .pipe(rename('index.html'))
        .pipe(gulp.dest('./'));
}

// Generate index.html for production build
function templateProduction() {
    return gulp
        .src('./template.html')
        // Remove development block
        // Use CDN resources
        .pipe(htmlReplace({
            dev: '',
        }, {
            keepUnassigned: true, // Keep other unmentioned blocks
        }))
        // Rewrite file names generated by gulp-rev to cache-bust assets
        .pipe(revReplace({
            manifest: gulp.src(path.join(BUILD_DIR, 'rev-manifest.json'))
        }))
        // Minify
        .pipe(htmlmin({
            collapseWhitespace: true,
            removeComments: true,
            removeScriptTypeAttributes: true,
        }))
        // Output to project root dir
        .pipe(rename('index.html'))
        .pipe(gulp.dest('./'));
}

function sync() {
    // Start Browsersync service
    browsersync.init({
        server: true,
        open: 'local',
        browser: 'chrome',
        files: [
            'index.html',
            path.join(BUILD_DIR, '**'),
        ],
    });

    // Watch
    gulp.watch('template.html', templateDev);
    gulp.watch('src/css/*.scss', css);
}

const build = gulp.series(clean, css);
const build_dev = gulp.series(build, templateDev);
const build_prod = gulp.series(build, optimizeCSS, templateProduction);

// Public task
gulp.task('default', gulp.series(build_dev, sync));
gulp.task('build', build_dev); // Development build
gulp.task('build:prod', build_prod); // Production build (w/ optimization)
gulp.task('clean', clean);
gulp.task('scss', css);
